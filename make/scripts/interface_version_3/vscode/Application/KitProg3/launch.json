{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    //
    // NOTE for JLink users:
    //
    //    Please create the following setting in your VSCode User Settings or in
    //    your global PATH.  Cortex-Debug needs to find the specific gdb-server
    //    you want to use.
    //
    //       Windows     : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServerCL"
    //       Linux / Mac : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServer"
    //
    //    User settings are located in:
    //
    //       Windows : %APPDATA%/Code/User/settings.json
    //       Mac     : $HOME/Library/Application Support/Code/User/settings.json
    //       Linux   : $HOME/.config/Code/User/settings.json
    //
    //    You can use the VSCode Settings UI to edit the files mentioned above.
    //
    //    For the JLink configurations in this file, the "device" name comes from
    //    the list found here:
    //       https://www.segger.com/downloads/supported-devices.php
    //
    //    To use KitProg3/MiniProg4 JTAG interface, update transport in openocd.tcl located at the
    //    project root - find "transport select [swd|jtag]" and specify the appropriate interface.
    //    To use JLink JTAG interface, update corresponding JLink configuration.
    //    Set "interface" property to "jtag".
    //
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Multi-Core Debug (KitProg3_MiniProg4)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "executable": "&&_MTB_RECIPE__ELF_FILE_APPLICATION&&",
            "servertype": "openocd",
            "searchDir": [
                "${workspaceFolder}",
                "${config:modustoolbox.toolsPath}/&&_MTB_RECIPE__OPENOCD_SCRIPTS_DIR_RELATIVE&&/",
                "&&_MTB_RECIPE__QSPI_CFG_PATH_APPLICATION&&"
            ],
            "configFiles": [
                "openocd.tcl"
            ],
            "overrideLaunchCommands": [
                "set mem inaccessible-by-default off",
                "-enable-pretty-printing",
                "set remotetimeout 15",
                "monitor reset init",
                // Comment these next lines out if you don't want to reload program
                "monitor flash write_image erase {&&_MTB_RECIPE__HEX_FILE_APPLICATION&&}",
                "monitor reset init",
                "monitor cat1c reset_halt sysresetreq"
            ],
            // svdFile is optional, it can be very large.
            "svdFile": "&&_MTB_RECIPE__APPLICATION_SVD_FILE_NAME&&",
            "numberOfProcessors": &&_MTB_RECIPE__PROCESSOR_COUNT&&,
            "targetProcessor": &&_MTB_RECIPE__TARGET_PROCESSOR_NUMBER&&, // Set to 0 for the CM0+, set to 1 or 2 for the CM7
            "postStartSessionCommands": [
                // Needed if runToMain is false 
                // Following two commands are needed to get gdb and openocd and HW all in sync. 
                // Or, execution context (PC, stack, registers, etc.) look like they are from before reset. 
                // The stepi, is a pretend instruction that does not actually do a stepi, but MUST be done 
                // Its a documented workaround in openocd. Do a 'monitor help' to see more info 
                // 
                // An alternative command to use is "continue" instead of the following two 
                "monitor gdb_sync",
                "stepi"
            ],
            "overrideRestartCommands": [
                "starti"
            ],
            "postRestartSessionCommands": [
            ],
            "breakAfterReset": true,
            "runToEntryPoint": "main",    // Specifies application entry point name where program will halt
            "showDevDebugOutput": "none",
            "preLaunchTask": "Build",    // Set this to run a task from tasks.json
            "presentation": {
                "hidden": false,
                "group": " Multi-core"
            },
            "chainedConfigurations": {
                "enabled": true,
                "waitOnEvent": "postInit",
                "lifecycleManagedByParent": true,
                "launches": [                               // Array of launches. Order is respected
                    {
                        "name": "Attach &&_MTB_RECIPE__MCU_NAME&& CM7_0 (KitProg3_MiniProg4)",     // Name of CM7_0 attach configuration
                        "folder": "./&&_MTB_RECIPE__SECOND_APP_NAME&&",
                        "overrides": {
                            "overrideRestartCommands": [
                                "monitor halt"
                            ],
                            "postStartSessionCommands": [
                                "tb main",
                                "continue"
                            ]
                        }
                    },
                    {//triple-core only//
                        "name": "Attach &&_MTB_RECIPE__MCU_NAME&& CM7_1 (KitProg3_MiniProg4)",     // Name of CM7_1 attach configuration//triple-core only//
                        "folder": "./&&_MTB_RECIPE__THIRD_APP_NAME&&",//triple-core only//
                        "delayMs": 500,//triple-core only//
                        "overrides": {//triple-core only//
                            "overrideRestartCommands": [//triple-core only//
                                "monitor halt"//triple-core only//
                            ],//triple-core only//
                            "postStartSessionCommands": [//triple-core only//
                                "tb main",//triple-core only//
                                "continue"//triple-core only//
                            ]//triple-core only//
                        }//triple-core only//
                    }//triple-core only//
                ]
            }
        }
    ]
}
